export default {
  timeout: 'Request timeout',
  statusCode400: 'Bad request (400)',
  statusCode401: 'Session expired, Log in again. (401)',
  statusCode403: 'Forbidden (403)',
  statusCode404: 'Page not found (404)',
  statusCode408: 'Request timeout (408)',
  statusCode418: "This page isn't working (418)",
  statusCode500: 'Internal server error (500)',
  statusCode501: 'Not implemented (501)',
  statusCode502: 'Bad gateway (502)',
  statusCode503: 'Service unavailable (503)',
  statusCode504: 'Gateway timeout (504)',
  statusCode505: 'HTTP version not supported (505)',
  defaultStatusCode: 'Request error. Status code: ',
  noPermission: 'Permission denied.',
  userNotFound: 'User not found.',
  rateLimitOver: 'Too many requests.',
  modelNotFound: 'Model not found.',
  spaceNotFound: 'Space not found.',
  spaceVariableNotFound: 'Space variable not found.',
  spaceSecretNotFound: 'Confidential variable of space not found.',
  tokenNotFound: 'Token not found.',
  repoNotFound: 'Repository not found.',
  organizationNotFound: 'Organization not found.',
  countExceeded: 'Count exceeded.',
  spaceAppNotFound: 'Space application not found.',
  spaceAppUnmatchedStatus: 'Space application unmatched.',
  spaceAppRestartOverTime: 'Space application restart timed out.',
  accessTokenInvalid: 'Invalid access token.',
  csrfTokenMissing: 'Cross-site token missing.',
  csrfTokenInvalid: 'Invalid cross-site token.',
  csrfTokenNotFound: 'Cross-site token not found.',
  sessionInvalid: 'Invalid session.',
  sessionIdInvalid: 'Invalid session ID.',
  sessionIdMissing: 'Session ID missing.',
  sessionNotFound: 'Session not found.',
  branchExist: 'Branch exists.',
  branchInactive: 'Branch activated.',
  baseBranchNotFound: 'Basic branch not found.',
  orgResourceExist: 'Organization resource exists.',
  invalidParam: 'Invalid parameter.',
  emailError: 'Email binding error.',
  emailVerifyCodeError: 'Incorrect verification code.',
  emailVerifyCodeInvalid: 'Invalid verification code.',
  userNoEmail: 'Configure user email address.',
  userDuplicateBind: 'Username already bound.',
  emailDuplicateBind: 'Email address already taken.',
  emailDuplicateSend: 'Verification code sent repeatedly.',
  verifyEmailGitError: 'git账号异常',
  disagreedPrivacy: 'Disagreed to privacy policy.',
  expired: 'Expired.',
  noPrivilegeOrg: 'No privileged organization.',
  privilegeOrgIdMismatch: 'Privileged organization unmatched.',
  notInPrivilegeOrg: 'Not in a privileged organization.',
  internalError: 'Network error.',
  duplicateCreating: 'Duplicate creation.',
  failedToGetOwnerInfo: 'Unable to obtain owner information.',
  failedToGetPlatformUser: 'Unable to obtain platform users.',
  failedToCreateOrg: 'Unable to create organization.',
  failedToCreateToOrg: 'Unable to join organization.',
  failedToSaveOrgMember: 'Unable to save member information.',
  systemError: 'System error.',
  theOrgHasOnlyOneMember: 'Organization has only one member.',
  failedToRemoveMember: 'Unable to remove member.',
  theUserIsAlreadyAMemberOfTheOrg: 'User is already an organization member.',
  orgNotAllowRequestMember: 'Organization does not permit invitations.',
  invalidParamForRequestMember: 'Invalid parameter to invite members.',
  invalidParamForCancelRequestMember: 'Invalid parameter to cancel invitation.',
  invalidParamForListMemberRequest: 'Invalid parameter to query organization members.',
  invalidParamForOrgDeleted: 'Invalid parameter to delete organization.',
  invalidActorName: 'Invalid role name.',
  orgFullnameIsEmpty: 'Organization name empty.',
  invalidAccount: 'Invalid account.',
  invalidOrg: 'Invalid organization.',
  invalidActor: 'Invalid role.',
  invalidUser: 'Invalid user.',
  invalidRequester: 'Invalid requester.',
  orgNameRequesterAllEmpty: 'Organization name and requester cannot be both empty for querying the member list.',
  overOrgnameInviteeInviter: 'Only one organization name, invitee, or inviter can be used.',
  memberInvitationParamAllEmpty: 'Organization name, invitee, and inviter cannot be empty for querying member invitation list.',
  fullnameCantBeEmpty: 'Full name cannot be empty.',
  failedToUpdateUserInfo: 'Unable to update user profile.',
  failedToUpdateGitUserinfo: 'Unable to update Git user information.',
  usernameInvalid: 'Invalid username.',
  failedToDeleteUser: 'Unable to delete user.',
  failedToDeleteUserInGitServer: 'Unable to delete user from the Git server.',
  userAlreadyRequestedToBeDelete: 'Duplicate request.',
  failedToCreateToken: 'Unable to create token.',
  failedToEcryptToken: 'Unable to encrypt token.',
  inputParamIsEmpty: 'Input parameter empty.',
  failedToGetUserInfo: 'Unable to obtain user information.',
  deleteTokenParamIsEmpty: 'Empty parameters for deleting token.',
  failedToSaveOrg: 'Unable to save organization.',
  nothingChanged: 'Unchanged.',
  failedToGetOrgInfo: 'Unable to obtain user information.',
  failedToGetMemberInfo: 'Unable to obtain trainee information.',
  failedToSaveMemberForAddingMember: 'Unable to add member.',
  theOnlyOwnerCanNotBeRemoved: 'The unique owner can only be removed.',
  failedToValidateCmd: 'Command verification failed.',
  failedToDeleteGitMember: 'Unable to delete Git member.',
  failedToDeleteMember: 'Unable to delete member.',
  failedToChangeOwnerOfOrg: 'Unable to change the organization owner.',
  nameIsAlreadyBeenTaken: 'Name already exists.',
  accountCanNotDeleteTheOrg: 'Current account cannot delete organization.',
  failedToGetOrg: 'Unable to obtain organization information.',
  failedToGetMembersByOrgName: 'Unable to obtain members by organization name.',
  userAccountIsAlreadyAMemberOfTheOrgAccount: 'User is already an organization member.',
  failedToAddMember: 'Unable to add users to organization.',
  invalidStatus: 'Invalid status.',
  missingName: 'Name lost.',
  missingAccount: 'Account lost.',
  userNameIsAlreadyTaken: 'Username already exists.',
  failedToCreatePlatformUser: 'Unable to create platform user.',
  failedToSaveUser: 'Unable to save user information.',
  badRequestParam: 'Incorrect request parameters.',
  branchNotFound: 'Branch not found.',
  branchOrPathNotFound: 'Branch or path not found.',
  fileNotFound: 'File not found.',
  notDir: 'No directory.',
  notFile: 'File not found.',
  emptyRepo: 'Empty repository.',
  ownerNotFound: 'Owner not found.',
  sensitiveNotPass: 'Sensitivity testing not passed.',
  invalidLicense: 'Invalid certificate.',
  noFileOrTooManyFiles: 'No files or too many files.',
  emptyFilePath: 'Empty file path.',
  fileContentIsNotChanged: 'File remains unchanged.',
};
